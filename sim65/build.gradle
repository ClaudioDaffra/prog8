buildscript {
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

plugins {
    // id "org.jetbrains.kotlin.jvm" version $kotlinVersion
    id 'application'
    id 'org.jetbrains.dokka' version "0.9.18"
    id 'com.github.johnrengelman.shadow' version '5.1.0'
    id 'java'
}

apply plugin: "kotlin"
apply plugin: "java"

targetCompatibility = 1.8
sourceCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url "https://dl.bintray.com/orangy/maven/" }
}

def sim65version = rootProject.file('sim65/res/version.txt').text.trim()

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    // implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    // runtime "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"

    testImplementation "org.jetbrains.kotlin:kotlin-test-junit5:$kotlinVersion"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.2'
    testImplementation 'org.hamcrest:hamcrest-junit:2.0.0.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.2'
    compile 'org.jetbrains.kotlinx:kotlinx-cli-jvm:0.1.0-dev-5'
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        // verbose = true
        // freeCompilerArgs += "-XXLanguage:+NewInference"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

sourceSets {
    main {
        java {
            srcDirs = ["${project.projectDir}/src"]
        }
        resources {
            srcDirs = ["${project.projectDir}/res"]
        }
    }
    test {
        java {
            srcDirs = ["${project.projectDir}/test"]
        }
    }
}

startScripts.enabled = true

application {
    mainClassName = 'sim65.Sim65MainKt'
    applicationName = 'sim65'
}

artifacts {
    archives shadowJar
}


shadowJar {
    baseName = 'sim65'
    version = sim65version
    // minimize()
}


test {
    // Enable JUnit 5 (Gradle 4.6+).
    useJUnitPlatform()

    // Always run tests, even when nothing changed.
    dependsOn 'cleanTest'

    // Show test results.
    testLogging {
        events "failed"
    }
    systemProperties['junit.jupiter.execution.parallel.enabled'] = true
    systemProperties['junit.jupiter.execution.parallel.mode.default'] = 'concurrent'
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
}


dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/kdoc"
}
