%output basic
%import c64lib


~ main {

	var     zp1_1   = 200
	var     zp1_2   = 200
	var .float  zpf1
	var .text zp_s1 = "hello\n"
	var .ptext zp_s2 = "goodbye\n"
	var .stext zp_s3 = "welcome\n"
	var .pstext zp_s4 = "go away\n"
	const .text ctext = "constant\n"

	var  .array(20)  arr1 = $ea
	var  .wordarray(20)  arr2 = $ea
	memory  border = $d020
	const .word cword = 5/3

start:
	%breakpoint abc,def

	A++
	X--
	A+=1
	X-=2
	border++
	zp1_1++
	zpf1++
	;[AX]++
	;[AX .byte]++
	;[AX .word]++
	;[AX .float]++
	;[$ccc0]++
	;[$ccc0 .byte]++
	;[$ccc0 .word]++
	;[$ccc0 .float]++
	A+=2
	A+=3
	XY+=6
	XY+=222
	A=222/13                ; @todo warn truncate (in assignment stmt)
	XY+=666
	zpf1+=1
	zpf1+=2
	zpf1+=2.123425425               ; @todo store as constant float with generated name, replace value node


	foobar()

	return 44

sub foobar () -> () {

	return
	%breakpoint yep
	return
}

label2:
	A++
	%noreturn

}

